/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.fidel;

import java.io.IOException;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.io.TiFileFactory;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.titanium.util.TiUIHelper;
import org.json.JSONException;
import org.json.JSONObject;

import com.fidel.sdk.Fidel;
import com.fidel.sdk.LinkResult;
import com.fidel.sdk.view.EnterCardDetailsActivity;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;

@Kroll.module(name = "Tifidel", id = "ti.fidel", propertyAccessors = { "paymentDidComplete" })
public class TifidelModule extends KrollModule {
	// Standard Debugging variables
	private static final String LCAT = "TifidelModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	@Kroll.constant
	public static final String COUNTRY_UNITED_KINGDOM = Fidel.Country.UNITED_KINGDOM.name();
	@Kroll.constant
	public static final String COUNTRY_IRELAND = Fidel.Country.IRELAND.name();
	@Kroll.constant
	public static final String COUNTRY_JAPAN = Fidel.Country.JAPAN.name();
	@Kroll.constant
	public static final String COUNTRY_UNITED_STATES = Fidel.Country.UNITED_STATES.name();
	@Kroll.constant
	public static final String COUNTRY_SWEDEN = Fidel.Country.SWEDEN.name();

	@Kroll.constant
	public static final int FIDEL_LINK_CARD_REQUEST_CODE = Fidel.FIDEL_LINK_CARD_REQUEST_CODE;
	@Kroll.constant
	public static final String FIDEL_LINK_CARD_RESULT_CARD = Fidel.FIDEL_LINK_CARD_RESULT_CARD;

	private boolean autoScan;
	private KrollFunction onPaymentDidCompleteCallback;

	public TifidelModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	// Methods
	@Kroll.method
	public void init(KrollDict opts) {
		if (opts.containsKeyAndNotNull("apiKey")) {
			Fidel.apiKey = opts.getString("apiKey");
		}
		if (opts.containsKeyAndNotNull("bannerImage")) {
			Fidel.bannerImage = loadImageFromApplication(opts.getString("apiKey"));
		}
		if (opts.containsKeyAndNotNull("companyName")) {
			Fidel.companyName = opts.getString("companyName");
		}
		if (opts.containsKeyAndNotNull("country")) {
			Fidel.country = Fidel.Country.valueOf(opts.getString("country"));
		}
		if (opts.containsKeyAndNotNull("privacyURL")) {
			Fidel.privacyURL = opts.getString("privacyURL");
		}
		if (opts.containsKeyAndNotNull("programId")) {
			Fidel.programId = opts.getString("programId");
		}
		if (opts.containsKeyAndNotNull("metaData")) {
			Fidel.metaData = new JSONObject(opts.getKrollDict("metaData"));
		}
		if (opts.containsKeyAndNotNull("paymentDidComplete")) {
			onPaymentDidCompleteCallback =  (KrollFunction) opts.get("paymentDidComplete");
		}
		if (hasProperty("paymentDidComplete")) {
			Object o = getProperty("paymentDidComplete");
			if (o instanceof KrollFunction) {
				onPaymentDidCompleteCallback = (KrollFunction) o;
			}
		}
	}

	private Bitmap loadImageFromApplication(String imageName) {
		Bitmap bitmap = null;
		String url = null;
		try {
			url = resolveUrl(null, imageName);
			TiBaseFile file = TiFileFactory.createTitaniumFile(new String[] { url }, false);
			bitmap = TiUIHelper.createBitmap(file.getInputStream());
		} catch (IOException e) {
			Log.e(LCAT, "Fidel only supports local image files " + url);
		}
		return bitmap;
	}

	@Kroll.method
	public void createForm() {
		present();
	}

	@Kroll.method
	public void startScanner() {
		autoScan = true;
		present();
	}

	@Kroll.method
	public void present() {
		TiActivitySupport support = (TiActivitySupport) TiApplication.getAppCurrentActivity();
		Fidel.FIDEL_LINK_CARD_REQUEST_CODE = support.getUniqueResultCode();
		support.launchActivityForResult(
				new Intent(TiApplication.getInstance().getApplicationContext(), EnterCardDetailsActivity.class),
				Fidel.FIDEL_LINK_CARD_REQUEST_CODE, new PaymentResultHandler());
	}

	private final class PaymentResultHandler implements TiActivityResultHandler {
		public void onError(Activity arg0, int arg1, Exception e) {
			Log.e(LCAT, e.getMessage());
		}

		public void onResult(Activity dummy, int requestCode, int resultCode, Intent data) {
			if (requestCode == Fidel.FIDEL_LINK_CARD_REQUEST_CODE) {
				if (data != null && data.hasExtra(Fidel.FIDEL_LINK_CARD_RESULT_CARD)) {
					LinkResult card = (LinkResult) data.getParcelableExtra(Fidel.FIDEL_LINK_CARD_RESULT_CARD);

					KrollDict event = new KrollDict();
					event.put("accountId", card.accountId);
					event.put("countryCode", card.countryCode);
					event.put("created", card.created);
					event.put("expDate", card.expDate);
					event.put("expMonth", card.expMonth);
					event.put("expYear", card.expYear);
					event.put("id", card.id);
					event.put("lastNumbers", card.lastNumbers);
					event.put("live", card.live);
					event.put("mapped", card.mapped);
					try {
						event.put("metaData", new KrollDict(card.metaData));
					} catch (JSONException e) {
						e.printStackTrace();
					}
					event.put("programId", card.programId);
					event.put("scheme", card.scheme);
					event.put("type", card.type);
					event.put("updated", card.updated);
					event.put("describeContents", card.describeContents());
					if (hasListeners("paymentDidComplete")) {
						fireEvent("paymentDidComplete", event);
					}
					if (onPaymentDidCompleteCallback != null) {
						onPaymentDidCompleteCallback.call(getKrollObject(), event);
					}
				}
			}
		}
	}
}
